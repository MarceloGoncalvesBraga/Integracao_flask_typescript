{"ast":null,"code":"const BASE_URL = 'http://localhost:3008';\n\nclass UserService {\n  post(url, params) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const headers = this.headers({});\n        const res = await fetch(`${BASE_URL}${url}`, {\n          method: 'POST',\n          headers: headers,\n          body: JSON.stringify(params)\n        });\n        const resJson = await res.json();\n        resolve(resJson);\n      } catch (error) {\n        console.log('Erro ao enviar informaÃ§Ãµes ðŸ˜ž', error);\n      }\n    });\n  }\n\n  get(url) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const headers = this.headers({});\n        const res = await fetch(`${BASE_URL}${url}`, {\n          method: 'GET',\n          headers\n        });\n        const resJson = await res.json();\n        resolve(resJson);\n      } catch (error) {\n        console.log('Erro ao enviar informaÃ§Ãµes ðŸ˜ž', error);\n      }\n    });\n  }\n\n  headers(h) {\n    const headers = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json',\n      ...h\n    };\n    return headers;\n  }\n\n}\n\nconst Service = new UserService();\nexport default Service;","map":{"version":3,"names":["BASE_URL","UserService","post","url","params","Promise","resolve","reject","headers","res","fetch","method","body","JSON","stringify","resJson","json","error","console","log","get","h","Service"],"sources":["/home/marcelo/bot/front/src/services/service.ts"],"sourcesContent":["\n\nconst BASE_URL = 'http://localhost:3008';\n\nclass UserService {\n\n  post<a>(url: string, params: Object): Promise<a> {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const headers = this.headers({});\n        const res = await fetch(`${BASE_URL}${url}`, {\n          method: 'POST',\n          headers: headers,\n          body: JSON.stringify(params),\n        });\n        const resJson = await res.json();\n        resolve(resJson);\n      } catch (error: any) {\n        console.log('Erro ao enviar informaÃ§Ãµes ðŸ˜ž', error);\n      }\n    });\n  }\n  get<a>(url: string): Promise<a> {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const headers = this.headers({});\n        const res = await fetch(`${BASE_URL}${url}`, {\n          method: 'GET',\n          headers,\n        });\n        const resJson = await res.json();\n        resolve(resJson);\n      } catch (error) {\n        console.log('Erro ao enviar informaÃ§Ãµes ðŸ˜ž', error);\n      }\n    });\n  }\n\n  headers(h: Object): any {\n    const headers = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json',\n      ...h,\n    };\n    return headers;\n  }\n}\nconst Service = new UserService();\n\nexport default Service;\n"],"mappings":"AAEA,MAAMA,QAAQ,GAAG,uBAAjB;;AAEA,MAAMC,WAAN,CAAkB;EAEhBC,IAAI,CAAIC,GAAJ,EAAiBC,MAAjB,EAA6C;IAC/C,OAAO,IAAIC,OAAJ,CAAY,OAAOC,OAAP,EAAgBC,MAAhB,KAA2B;MAC5C,IAAI;QACF,MAAMC,OAAO,GAAG,KAAKA,OAAL,CAAa,EAAb,CAAhB;QACA,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAEV,QAAS,GAAEG,GAAI,EAAnB,EAAsB;UAC3CQ,MAAM,EAAE,MADmC;UAE3CH,OAAO,EAAEA,OAFkC;UAG3CI,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeV,MAAf;QAHqC,CAAtB,CAAvB;QAKA,MAAMW,OAAO,GAAG,MAAMN,GAAG,CAACO,IAAJ,EAAtB;QACAV,OAAO,CAACS,OAAD,CAAP;MACD,CATD,CASE,OAAOE,KAAP,EAAmB;QACnBC,OAAO,CAACC,GAAR,CAAY,+BAAZ,EAA6CF,KAA7C;MACD;IACF,CAbM,CAAP;EAcD;;EACDG,GAAG,CAAIjB,GAAJ,EAA6B;IAC9B,OAAO,IAAIE,OAAJ,CAAY,OAAOC,OAAP,EAAgBC,MAAhB,KAA2B;MAC5C,IAAI;QACF,MAAMC,OAAO,GAAG,KAAKA,OAAL,CAAa,EAAb,CAAhB;QACA,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAEV,QAAS,GAAEG,GAAI,EAAnB,EAAsB;UAC3CQ,MAAM,EAAE,KADmC;UAE3CH;QAF2C,CAAtB,CAAvB;QAIA,MAAMO,OAAO,GAAG,MAAMN,GAAG,CAACO,IAAJ,EAAtB;QACAV,OAAO,CAACS,OAAD,CAAP;MACD,CARD,CAQE,OAAOE,KAAP,EAAc;QACdC,OAAO,CAACC,GAAR,CAAY,+BAAZ,EAA6CF,KAA7C;MACD;IACF,CAZM,CAAP;EAaD;;EAEDT,OAAO,CAACa,CAAD,EAAiB;IACtB,MAAMb,OAAO,GAAG;MACd,gBAAgB,kBADF;MAEd,UAAU,kBAFI;MAGd,GAAGa;IAHW,CAAhB;IAKA,OAAOb,OAAP;EACD;;AAzCe;;AA2ClB,MAAMc,OAAO,GAAG,IAAIrB,WAAJ,EAAhB;AAEA,eAAeqB,OAAf"},"metadata":{},"sourceType":"module"}